// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dm.BanBonanza.Data;

namespace dm.BanBonanza.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190207172318_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("dm.BanBonanza.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Difficulty");

                    b.Property<DateTime>("End");

                    b.Property<int>("Lower");

                    b.Property<int>("MaxGuesses");

                    b.Property<int>("Number");

                    b.Property<int>("Reward");

                    b.Property<int>("SeasonId");

                    b.Property<DateTime>("Start");

                    b.Property<int>("Upper");

                    b.Property<int>("WinnerId");

                    b.Property<decimal>("WinnerUserId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.HasKey("GameId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("WinnerUserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("dm.BanBonanza.Models.Guess", b =>
                {
                    b.Property<int>("GuessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GameId");

                    b.Property<decimal>("MessageId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<int>("Number");

                    b.Property<int>("Response");

                    b.Property<int>("UserId");

                    b.Property<decimal?>("UserId1")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.HasKey("GuessId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId1");

                    b.ToTable("Guesses");
                });

            modelBuilder.Entity("dm.BanBonanza.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Difficulty");

                    b.Property<DateTime>("End");

                    b.Property<string>("Name");

                    b.Property<int>("Pot");

                    b.Property<DateTime>("Start");

                    b.Property<int>("StartedById");

                    b.Property<decimal?>("StartedByUserId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.HasKey("SessionId");

                    b.HasIndex("StartedByUserId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("dm.BanBonanza.Models.User", b =>
                {
                    b.Property<decimal>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<bool>("IsAlt");

                    b.Property<string>("Name");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dm.BanBonanza.Models.Game", b =>
                {
                    b.HasOne("dm.BanBonanza.Models.Session", "Season")
                        .WithMany("Games")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dm.BanBonanza.Models.User", "Winner")
                        .WithMany("GamesWon")
                        .HasForeignKey("WinnerUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dm.BanBonanza.Models.Guess", b =>
                {
                    b.HasOne("dm.BanBonanza.Models.Game")
                        .WithMany("Guesses")
                        .HasForeignKey("GameId");

                    b.HasOne("dm.BanBonanza.Models.User", "User")
                        .WithMany("Guesses")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("dm.BanBonanza.Models.Session", b =>
                {
                    b.HasOne("dm.BanBonanza.Models.User", "StartedBy")
                        .WithMany("SessionsStarted")
                        .HasForeignKey("StartedByUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
